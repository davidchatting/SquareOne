//	DJC:	Created 10th March 2000.package uk.ac.bham.cs.djc.ui;import uk.ac.bham.cs.djc.ui.FootballMoviePlayer;import uk.ac.bham.cs.djc.ui.QTFootballMoviePlayer;import javax.swing.JPanel;import javax.swing.JCheckBox;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.awt.Button;import java.net.URL;import java.awt.Dimension;import java.awt.Component;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import uk.ac.bham.cs.djc.*;import uk.ac.bham.cs.djc.time.TimesOfInterest;import uk.ac.bham.cs.djc.time.TimeLine;import uk.ac.bham.cs.djc.time.Period;import uk.ac.bham.cs.djc.time.Interest;/**	The application's results panel. * 	Allows users to watch the highlights and experiment with summarisation algorithms * 	 * 	<a href="ResultsPanel.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 10th March 2000 */public class ResultsPanel extends JPanel implements ActionListener{    /**	Reference to the top level window */    private Application theApplication;        /**	The movie player */    private FootballMoviePlayer moviePlayer;        /**	The panel containing the events found in the video */    private EventPanel eventPanel;        /**	Check box to play only the summary */    private JCheckBox summaryCheckBox;        /**	The status of the summary check box */    private boolean summaryCheckBoxStatus=false;        /**	The currently active period of interest */    private Interest currentPeriodInterest=null;        /**	Clock used to syncronise the video with the graph highlighting */    private Clock thisClock=null;        /**	The events which are of interest to the viewer */    private TimesOfInterest eventsOfInterest=null;        /**	Construct a new ResultsPanel object     * 	@param newApplication reference to the Application object (the top level window)     * 	@param events the most interesting times to show to the user     * 	@exception	Exception if a new can't be created     */    public ResultsPanel(Application newApplication,TimesOfInterest newEventsOfInterest) throws Exception {	theApplication=newApplication;	eventsOfInterest=newEventsOfInterest;		GridBagLayout gridbag=new GridBagLayout();	GridBagConstraints constraints=new GridBagConstraints();	setLayout(gridbag);		//Make and add the movie player:	buildConstraints(constraints,0,0,1,1,100,100);	constraints.fill=GridBagConstraints.NONE;	constraints.anchor=GridBagConstraints.NORTH;	moviePlayer=QTFootballMoviePlayer.getNewQTFootballMoviePlayer("Movie Player Title");	gridbag.setConstraints(moviePlayer,constraints);	add(moviePlayer);		//Add the events panel:	buildConstraints(constraints,1,0,1,1,100,100);	constraints.fill=GridBagConstraints.NONE;	constraints.anchor=GridBagConstraints.CENTER;	eventPanel=new EventPanel(eventsOfInterest,this);	gridbag.setConstraints(eventPanel,constraints);	add(eventPanel);		//Add a check box to control if only the summary is played (initially off):	buildConstraints(constraints,0,1,2,1,100,100);	constraints.fill=GridBagConstraints.NONE;	constraints.anchor=GridBagConstraints.CENTER;	summaryCheckBox=new JCheckBox("Play Summary Only",summaryCheckBoxStatus);	summaryCheckBox.addActionListener(this);	gridbag.setConstraints(summaryCheckBox,constraints);	add(summaryCheckBox);		//Make this object a listener to application events:	theApplication.addListener(this);		//Make and start a new clock:	thisClock=new Clock(moviePlayer);	Thread clockThread=new Thread(thisClock);	clockThread.start();    }        /**	Return the clock which syncronises the video and the graphs     * 	@return the clock     */    public Clock getClock() {	return(thisClock);    }        /*    public void selectTimeLine(TimeLine timelineToPlay) throws Exception {	moviePlayer.selectTimeLine(timelineToPlay);    }    */        /**	Play this video clip     * @param clipToPlay the clip to play     * @exception Exception if the clip can't be played     */    public void selectClip(Period clipToPlay) throws Exception {	moviePlayer.selectClip(clipToPlay);    }        /**	Play this video clip     * @param interestOfClip the Interest object to play     * @exception Exception if the clip can't be played     */    public void selectClip(Interest interestOfClip) throws Exception {	currentPeriodInterest=interestOfClip;		Period selectedPeriod=null;		//Check the state of the "summary only" check box:	if(summaryCheckBoxStatus) {	    //Play just the summarised period:	    selectedPeriod=currentPeriodInterest.getSummarisedPeriod();	}	else {	    //Play the whole section:	    selectedPeriod=currentPeriodInterest.getPeriodOfMedia();	}	selectClip(selectedPeriod);    }        /**	Set the movie to play     * @param theURL the URL of the movie to play     * @exception Exception if there is a problem opening this movie for playing     */    public void setMovie(URL theURL,int startTime) throws Exception {	moviePlayer.setMovie(theURL,startTime);    }        /**	Gets the size of this component     *  @param 	prevCreatedDimen a previously allocated Dimension object into which the result will be placed,     *  	if null the result is a newly allocated Dimension object     *	@return	A Dimension object that indicates the size of this component     */    public Dimension getSize(Dimension prevCreatedDimen) {	Dimension result=null;		int width=0;	int height=0;		//Work out the best size for this panel:	width+=moviePlayer.getSize().width;	width+=eventPanel.getSize().width;		height+=moviePlayer.getSize().height;	height+=summaryCheckBox.getSize().height;		//Set the result:	if(prevCreatedDimen!=null) {	    prevCreatedDimen.setSize(width,height);	    result=prevCreatedDimen;	}	else result=new Dimension(width,height);		return(result);    }        /**	Sets the size of this component     *	@param newDimension the new dimensions     */    public void setSize(Dimension newDimension) {	setSize(newDimension.width,newDimension.height);    }        /**	Sets the size of this component     *	@param width the new width     *	@param height the new height     */    public void setSize(int width,int height) {	super.setSize(width,height);    }        /**	Adds the specified component to the end of this panel     * 	@param newComponent the component to add     * 	@return the component argument     */    public Component add(Component newComponent) {	return(super.add(newComponent));    }        /**	Required for the implementation of the ActionListener interface, to allow object to listen to Application events	     * 	Is invoked when an event is fired on one of the class with which this listener is registered     *	@param	ActionEvent the event catch by this listener     */    public void actionPerformed(ActionEvent event) {	String actionCommand=event.getActionCommand();		//If the check box was checked toggle its state:	if(actionCommand.equals("Play Summary Only")) {	    //Toggle the state of the check box status:	    if(summaryCheckBoxStatus) {	        summaryCheckBoxStatus=false;	    }	    else {	        summaryCheckBoxStatus=true;	    }	    	    try {		//Reselect the played clip as are/aren't now playing just summary:		selectClip(currentPeriodInterest);	    }	    catch(Exception e) {	    }	}    }        /**	Build the Grid-Bag layout constraints from these parameters     * 	@param	gbc the Grid-Bag constraints to set     * 	@param	gx the x coordinate in the grid     * 	@param	gy the y coordinate in the grid     * 	@param	gw the grid width     * 	@param	gh the grid height     * 	@param	wx the x weight     * 	@param	wy the y weight     */    public static void buildConstraints(GridBagConstraints gbc,int gx,int gy,int gw,int gh,int wx,int wy) {	gbc.gridx=gx;	gbc.gridy=gy;	gbc.gridwidth=gw;	gbc.gridheight=gh;	gbc.weightx=wx;	gbc.weighty=wy;    }    			}