//	DJC:	Created 12th March 2000.package uk.ac.bham.cs.djc.ui;import javax.swing.JPanel;import java.awt.Graphics;import java.awt.Dimension;import java.awt.Image;import java.awt.Color;import javax.swing.JLabel;import javax.swing.plaf.basic.BasicBorders;import uk.ac.bham.cs.djc.*;import uk.ac.bham.cs.djc.time.Feature;/**	A graph * 	Allows the graphing of Feature objects. * 	 * 	<a href="Graph.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 12th March 2000 */public class Graph extends JPanel{    /**	The graphed feature */    protected Feature thisFeature=null;        /**	The max y value in the feature */    protected float maxY=0;        /**	The min y value in the feature */    protected float minY=0;        /**	Data points per pixel on x axis */    protected int xScale=1;        /**	Data points per pixel on y axis */    protected int yScale=1;        /**	The graph's label */    protected JLabel thisLabel=null;        /**	The index of the feature data to highlight */    protected int indexToHighlight=0;        /**	Create a new Graph with this feature     * 	@param	newFeature the feature to graph     */    public Graph(Feature newFeature) {	thisFeature=newFeature;		minY=thisFeature.min();	maxY=thisFeature.max();		//Add label:	thisLabel=new JLabel(thisFeature.getFeatureName());		add(thisLabel);    }        /**	Get the scaled y value to plot at this index from the feature     * 	@param index at which to get the y value to plot     * 	@return	the y value to plot     */    protected float getYValueAt(int index) throws IndexOutOfBoundsException{	float value=0f;	int s=0;		//Get as many data points are available and take mean:	while(s<xScale) {		value+=thisFeature.getScoreAtIndex(index+s);		s++;	}	value=value/((float)s);		return(value*10f);    }        /**	Rescale the graph     * @param	width the width to scale for     * @param	height the height to scale for     */    protected void rescale(int width,int height) {	try {		xScale=thisFeature.getNumberOfElements()/(width-1);				float yScaleFloat=(maxY-minY)/((float)(height-thisLabel.getHeight()));		yScale=(int)yScaleFloat;		if(yScaleFloat%1!=0f) yScale++;	}	catch(java.lang.ArithmeticException ae) {	    //Division by zero	}		if(xScale<1) xScale=1;	if(yScale<1) yScale=1;    }        /**	Gets the size of this component     *  @param 	prevCreatedDimen a previously allocated Dimension object into which the result will be placed,     *  	if null the result is a newly allocated Dimension object     *	@return	A Dimension object that indicates the size of this component     */    public Dimension getSize(Dimension preCreatedDimension) {	return(super.getSize(preCreatedDimension));    }        /**	Sets the size of this component     * 	Will cause the graph to rescale and repaint     *	@param width the new width     *	@param height the new height     */    public void setSize(int width,int height) {	super.setSize(width,height);		rescale(width,height);		revalidate();	repaint();    }        /**	Sets the size of this component     * 	Will cause the graph to rescale and repaint     *	@param newDimension the new dimensions     */    public void setSize(Dimension newDimension) {	setSize(newDimension.width,newDimension.height);    }        /**	Paint this component - drawing the graph in the panel     *	@param	g the Graphics context     */    public void paintComponent(Graphics g) {	super.paintComponent(g); //paint background		float y=0;	float y2=0;	int height=getSize((Dimension)null).height;	int width=getSize((Dimension)null).width;	rescale(width,height);		//Draw y-axis:	g.setColor(Color.gray);	g.drawLine(10,(int)(height-5f),10,((int)(height-5f))-10);		//for(each point on the x-axis):	for(int x=0;x<width;x++) {	    	try {	    		y=getYValueAt(x*xScale);			y2=getYValueAt((x+1)*xScale);						y=(y-minY)/((float)yScale);			y2=(y2-minY)/((float)yScale);						//The origin is in the top left of the panel:			y=height-y-5f;			y2=height-y2-5f;						//Plot x-axis:			g.setColor(Color.gray);			g.drawLine(x+10,(int)(height-5f),x+12,(int)(height-5f));						if(isHighlight(x*xScale)) {			    //Paint hightlighted point:			    g.setColor(Color.red);			    g.fillOval(x+9,((int)y)-1,3,3);			} 			else {			    //Paint normal point:			    g.setColor(Color.black);			    g.drawLine(x+10,(int)y,x+11,(int)y2);			}	    	}	    	catch(IndexOutOfBoundsException ioobe) {		    //This exception will be thrown on the last calculation of y2		    //and where there are no more data points left	    	}	}    }        /**	Set the time for which the graph should be highlighted     * 	@param	relativeTime the time relative to the start of the video at which the graph should be hightlighed     */    public void setHighlight(int relativeTime) {	if(thisFeature!=null) {	    //Work out absolute time:	    int startTime=thisFeature.getPeriodOfMedia().getStart();	    	    try {		//Work out the index of this time:	      	indexToHighlight=thisFeature.getIndexOfTime(relativeTime);				//Repaint graph:	   	repaint();	    }	    catch(Exception e) {	    }	}    }        /**	Should the given index be highlighted on the graph?     * 	@param	index to test     * 	@return	if highlighted or not     */    protected boolean isHighlight(int index) {	boolean result=false;		int s=0;	//Does this index coinside with the indexToHighlight at this scale?	while(s<xScale && result==false) {		if(index+s==indexToHighlight) result=true;		s++;	}		return(result);    }}