package uk.ac.bham.cs.djc.ui;import quicktime.app.display.QTCanvas;import quicktime.app.display.QTDrawable;import quicktime.std.movies.Movie;import quicktime.QTException;import java.net.URL;import uk.ac.bham.cs.djc.time.Period;import uk.ac.bham.cs.djc.time.TimeLine;import java.awt.Canvas;import java.awt.Dimension;import javax.swing.JPanel;/**	Abstract class to play a football movie in a panel * 	 * 	<a href="FootballMoviePlayer.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 9th January 2000 */public abstract class FootballMoviePlayer extends JPanel{    	/**	The filename and path of the currently played movie */    	protected String currentMovieFile=null;		/**	The start time of this movie, relative to the start of the match */	protected int movieStartTime=0;    	/**	Construct a new FootballMoviePlayer	 * 	@param	title CURRENTLY UNUSED	 */    	public FootballMoviePlayer(String title) {	    //super(title);    	}    	/**	Set the movie file	 * 	@param	theURL the URL of the movie	 * 	@param	startTime the start time of this movie, relative to the start of the match	 * 	@exception	Expection if unable to set movie	 */	public abstract void setMovie(String theURL,int startTime) throws Exception;		/**	Set the movie file	 * 	@param	theURL the URL of the movie	 * 	@param	startTime the start time of this movie, relative to the start of the match	 * 	@exception	Expection if unable to set movie	 */	public void setMovie(URL theURL,int startTime) throws Exception {	    setMovie(theURL.toString(),startTime);	}		/**	Get the canvas	 * 	@return the canvas	 */	public abstract QTCanvas getCanvas();	//This will have to return a non-QT canvas		/**	Get the player	 * 	@return	the player	 */	public abstract QTDrawable getPlayer();	//This will have to return a non-QT drawable		/**	Stop the video playing	 */	public abstract void stopPlayer();		/**	Get the movie	 * 	@return the movie	 */	public abstract Movie getMovie();		/**	Get the current time from the begining of the video	 *	@return	the relative time	 *	@exception	Exception if can't obtain the relative time	 */	public abstract int getRelativeTime() throws Exception;		/**	Close the FootballMoviePlayer	 */	public static void close() {	    //Can't make static methods abstract	}		/*	public void selectTimeLine(TimeLine timelineToPlay) throws Exception{	    try {		if(timelineToPlay!=null) {		    	//For each period in this timeline:			for(int index=0;index<timelineToPlay.numOfPeriods();index++) {			    	//Select this period:		    		selectClip(timelineToPlay.getPeriodN(index));			}		}	    }	    catch(quicktime.QTException qte) {		throw new Exception(qte.toString());	    }	}	*/		/**	Select this video clip so that next time the movie is played only this selection is seen     	 * 	@param clipToPlay the clip to play     	 * 	@exception Exception if the clip can't be played     	 */	public abstract void selectClip(Period periodToPlay) throws Exception;		/**	Gets the size of this component     	 *	@return	A Dimension object that indicates the size of this component     	 */	public abstract Dimension getSize();		/**	Tidy up	 */	protected void finalize() throws Throwable {	    close();	    super.finalize();	}}