//	DJC:	Created 9th March 2000.package uk.ac.bham.cs.djc.ui;import javax.swing.JPanel;import javax.swing.JButton;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.awt.Dimension;import javax.swing.JFileChooser;import java.net.URL;import java.net.MalformedURLException;import java.util.Vector;import uk.ac.bham.cs.djc.*;/**	The application's settings panel. * 	Allows users to change the media files which are used for finding highlights * 	and to set options on them. * 	 * 	<a href="SettingsPanel.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 9th March 2000 */public class SettingsPanel extends JPanel implements ActionListener{    /**	The "GO" button */    private JButton goButton;        /**	Panel containing the parameters and their descriptions */    private ParameterDescriptionPanel thisParameterDescriptionPanel;        /**	Reference to the top level window */    private Application theApplication;        /** The media file parsing thread */    private Thread parsingThread=null;        /**	Vector containing the application's parameters */    private Vector parameterVector=new Vector();        /**	Construct a new SettingsPanel object     * 	@param newApplication reference to the Application object (the top level window)     */    public SettingsPanel(Application newApplication) {	theApplication=newApplication;		//Make the settings panel invisible - THIS PANEL IS NOT CURRENTLY USED	setVisible(false);		//Make a new ParameterDescriptionPanel:	thisParameterDescriptionPanel=new ParameterDescriptionPanel();	thisParameterDescriptionPanel.setVisible(true);		//Make this ParameterDescriptionPanel listen to Application events:	theApplication.addListener(this);		//Add the GO button & register this object as a listener to it's events:	goButton=new JButton("GO!");	goButton.setVisible(true);	goButton.addActionListener(this);	add(goButton);    }        /**	Open file chooser window     * 	@returns	the URl of the choosen file     */    public URL openFileChooser() {	URL URLtoReturn=null;	boolean urlIsGood=false;		//Make a new file chooser:        final JFileChooser fc = new JFileChooser(System.getProperty("file.separator"));	fc.setDialogTitle("Choose an Interest file");		String localPath=null;		//Show the dialog window:	int returnVal = fc.showOpenDialog(SettingsPanel.this);	do {		if (returnVal == JFileChooser.APPROVE_OPTION) {			localPath=(fc.getSelectedFile()).toString();		}				//Make the local file referenec into a URL:		try {			URLtoReturn=new URL("file://" + localPath);			urlIsGood=true;		}		catch(MalformedURLException mue) {		    	urlIsGood=false;		}	}	while(!urlIsGood);		return(URLtoReturn);    }        /**	Resizes this component     *	@param newDimension the new dimensions     */    public void setSize(Dimension newDimension) {	setSize(newDimension.width,newDimension.height);    }        /**	Sets the size of this component     *	@param width the new width     *	@param height the new height     */    public void setSize(int width,int height) {	super.setSize(width,height);    }        /**	Gets the size of this component     *  @param 	prevCreatedDimen a previously allocated Dimension object into which the result will be placed,     *  	if null the result is a newly allocated Dimension object     *	@return	A Dimension object that indicates the size of this component     */    public Dimension getSize(Dimension prevCreatedDimen) {	Dimension result=null;	int width=300;	int height=200;		//if(prevCreatedDimen is a Dimension object):	if(prevCreatedDimen!=null) {	    prevCreatedDimen.setSize(width,height);	    result=prevCreatedDimen;	}	else result=new Dimension(width,height);		return(result);    }        /**	Required for the implementation of the ActionListener interface, to allow object to listen to Application events	     * 	Is invoked when an event is fired on one of the class with which this listener is registered     *	@param	ActionEvent the event catch by this listener     */    public void actionPerformed(ActionEvent event) {	String actionCommand=event.getActionCommand();		//If(this event originated from the GO button):	if(actionCommand.equals("GO!") && parsingThread==null) {	    //Start the media file parsing as the user has request the application to "GO"!	    startParsingMovie();	}    }        /**	Start parsing the movie data     */    private void startParsingMovie() {	parsingThread=new Thread(theApplication);	parsingThread.start();    }        /**	Add a new parameter to the list of Application's parameters     * 	@param	parameterToAdd the new parameter to add     */    public void addParameter(Parameter parameterToAdd) {	parameterVector.addElement(parameterToAdd);		//thisParameterDescriptionPanel.addParameter(parameterToAdd);	add(new ParameterDescription(parameterToAdd));    }       /**	Get the Nth parameter in the list of Application's parameters     * 	@param	n the position in the list to retrieve     * 	@return	Parameter the requested parameter     * 	@throws	ArrayIndexOutOfBoundsException if an invalid position was given      */    public Parameter getNthParameter(int n) {	Parameter parameterToReturn=(Parameter)parameterVector.elementAt(n);		return(parameterToReturn);    }        /**	List the parameters and their values to the System.out stream     * 	DEBUG CODE     */    public void listParameters() {	for (int i = 0; i<parameterVector.size(); i++) {	    System.out.println((Parameter)parameterVector.elementAt(i));	}    }        /**	Get the number of parameters available to the application     * 	@return	the number of parameters     */    public int getNumberOfParameters() {	return(parameterVector.size());    }}