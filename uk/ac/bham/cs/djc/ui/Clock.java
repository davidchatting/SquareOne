//	DJC:	Created 21st March 2000.package uk.ac.bham.cs.djc.ui;import uk.ac.bham.cs.djc.*;import java.awt.event.ActionListener;import java.awt.event.ActionEvent;import java.util.Vector;/**	Clock syncronises the current time on the movie player with registered listeners * 	Can run as separate thread constantly monitoring the movie player * 	 * 	<a href="Clock.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 21st March 2000 */public class Clock implements Runnable{    /**	Vector of the listeners registered to receive events from the application */    private Vector listeners=new Vector();        /**	Reference to the FootballMoviePlayer object */    private FootballMoviePlayer thisFootballMoviePlayer;        /**	Make a new Clock     * 	@param	newFootballMoviePlayer reference to the FootballMoviePlayer object     */    public Clock(FootballMoviePlayer newFootballMoviePlayer) {	thisFootballMoviePlayer=newFootballMoviePlayer;    }        /**	Monitor the state of the movie player     *	Fire an event whenever the time changes    *	Implemeneted for Runnable interface     */    public void run() {	int relativeTime=0;	int lastTime=-1;	ActionEvent event=null;		//Will terminate when thread is killed:	while(true) {		try {		    	//Check the current movie time:		    	relativeTime=thisFootballMoviePlayer.getRelativeTime();						//If(the time has changed):			if(relativeTime!=lastTime) {			    	//Fire an event:			    	 System.out.println("time:	" + relativeTime);				event=new ActionEvent(this,0,new String("time:	" + relativeTime));				fireEvent(event);			}			lastTime=relativeTime;		}		catch(Exception e) {		}		(Thread.currentThread()).yield();	}    }        /**	Add listener to receive application events     *	@param newListener new listener to add    */    public void addListener(ActionListener newListener) {	listeners.addElement(newListener);    }        /**	Remove listener from list of registered objects     *	@param listenerToRemove listener to remove    */    public void removeListener(ActionListener listenerToRemove) {	listeners.removeElement(listenerToRemove);    }        /**	Fire this event to all registered listeners     *	@param eventToFire event to fire    */    protected void fireEvent(ActionEvent eventToFire) {	//For(each listener):	for(int index=0;index<listeners.size();index++) { 		((ActionListener)listeners.elementAt(index)).actionPerformed(eventToFire);	}    }}