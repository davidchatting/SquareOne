//10th December 1999package uk.ac.bham.cs.djc.MPEG_Play;import uk.ac.bham.cs.djc.mediaDescriptors.*;import uk.ac.bham.cs.djc.time.Period;import uk.ac.bham.cs.djc.RGB_pixel;import uk.ac.bham.cs.djc.FootballImageParser;import java.awt.Point;import java.net.URL;/**	A single frame from an MPEG video * 	 * 	<a href="MPEG_frame.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 10th December 1999 */public class MPEG_frame extends VideoBlock{     /**	The display number of this frame */    protected int frameNumber;        /**	The width of this frame, in pixels */    protected int frameWidth=0;        /**	The height of this frame, in pixels */    protected int frameHeight=0;        /**	The type of this frame (I,P or B) */    protected int frameType;        /**	Total number of macro-blocks in this frame */    protected int numberOfMacroblocks=0;        /**	Total number of forward macro-blocks in this frame */    protected int numberOfForwardMacroblocks=0;        /**	Total number of backward macro-blocks in this frame */    protected int numberOfBackwardMacroblocks=0;        /**	The picture information for this frame */    protected FootballImageParser pixelData=null;        /**	The total displacement of all the motion vectors in this frame */    protected Point totalDisplacement=new Point(0,0);        /**	The number of predominately vertical macro-blocks */    protected int verticalMacroblocks=0;        /**	The number of predominately horizontal macro-blocks */    protected int horizontalMacroblocks=0;        /**	Create a new instance of the MPEG_frame class     *	@param newPeriod the period over which this frame is displayed     *	@param movieFile the location of the movie file from which this frame is taken     */    public MPEG_frame(Period newPeriod,URL movieFile) {	//Frame rate is 0(?)	super(newPeriod,0d,movieFile);    }        /**	Create a new instance of the MPEG_frame class     *	@param newPeriod the period over which this frame is displayed     *	@param newFrameNumber the display number of this frame     *	@param width the width of this frame, in pixels     *	@param height the height of this frame, in pixels     *	@param newFrameType the type of this frame (I,P or B)     *	@param movieFile the location of the movie file from which this frame is taken     */    public MPEG_frame(Period newPeriod,int newFrameNumber,int width, int height, int newFrameType,URL movieFile) {	//Frame rate is 0(?)	super(newPeriod,0d,movieFile);		frameDetails(newFrameNumber,width,height,newFrameType);    }        /**	Set the details for this frame     *	@param newFrameNumber the display number of this frame     *	@param width the width of this frame, in pixels     *	@param height the height of this frame, in pixels     *	@param newFrameType the type of this frame (I,P or B)     */    public void frameDetails(int newFrameNumber,int width, int height, int newFrameType){	frameNumber=newFrameNumber;	frameWidth=width;	frameHeight=height;	frameType=newFrameType;    }        /**	Get the number of forward macro-blocks     *	@return the number of forward macro-blocks     */    public int getNumberOfForwardMacroblocks() {    	return(numberOfForwardMacroblocks);    }        /**	Get the number of backward macro-blocks     *	@return the number of backward macro-blocks     */    public int getNumberOfBackwardMacroblocks() {	return(numberOfBackwardMacroblocks);    }        /**	Add this pixel to the picture information for this frame     *	Frame samples every column of image (for goalposts) and every 4th row     *	@param newPixel	the pixel to add     */    public void addPixel(RGB_pixel newPixel) {	//if this is the first pixel, make a instance of FootballImageParser	if(pixelData==null) {	    //Samples image at 1 pixel intervals:	    pixelData=new FootballImageParser(frameWidth,frameHeight,1,4);	}		pixelData.addPixel(newPixel);    }        /**	Get the pixel data for this frame     *	@return instance of FootballImageParser containing the pixel data for this frame     */    public FootballImageParser getPixelData() {	return(pixelData);    }        /**	Get the display number of this frame     *	@return the display number of this frame     */    public int getFrameNumber() {    	return(frameNumber);    }        /**	Get the frame type of this frame as the char I,P or B     *	@return the frame type of this frame as the char I,P or B     */    public char getFrameType() {	char frameTypeChar='?';	switch(frameType) {	  	case MPEG_video.I_TYPE: frameTypeChar='I'; break;		case MPEG_video.P_TYPE: frameTypeChar='P'; break;		case MPEG_video.B_TYPE: frameTypeChar='B'; break;		default: frameTypeChar='?';	}		return(frameTypeChar);    }        /**	Add a macro-block to this frame     *	@param	newMacroblock the macro-block to add     */    public void addMacroblock(MPEG_macroblock newMacroblock){	//Recalculate the numbers of backwards and forwards macro-blocks:	if(newMacroblock.isForwardMacroblock()) numberOfForwardMacroblocks++;	else if(newMacroblock.isBackwardMacroblock()) numberOfBackwardMacroblocks++;	numberOfMacroblocks++;		//Recalculate the total displacement from motion vectors:	totalDisplacement.translate(newMacroblock.getDx(),newMacroblock.getDy());		//Recalculate numbers of predominately horizontal and vertical macro-blocks:	if(Math.abs(newMacroblock.getDx())>Math.abs(newMacroblock.getDy())) {	    horizontalMacroblocks++;	}	else {	    verticalMacroblocks++;	}    }        /**	Get the total displacement of all the motion vectors in this frame     * 	@return the total displacement of all the motion vectors in this frame     */    public Point getTotalDisplacement() {	return(totalDisplacement);    }        /**	Get the percetange macro-blocks with a predominately vertical motion vector     *	@return	the percetange macro-blocks with a predominately vertical motion vector     */    public float getPercentageOfVerticalMacroblocks() {	float percentOfVerticalMacroblocks=(float)verticalMacroblocks/(float)(verticalMacroblocks+horizontalMacroblocks);		return(percentOfVerticalMacroblocks);    }        /**	Get the percetange macro-blocks with a predominately horizontal motion vector     *	@return	the percetange macro-blocks with a predominately horizontal motion vector     */    public float getPercentageOfHorizontalMacroblocks() {	return(1f-getPercentageOfVerticalMacroblocks());    }        /**	The ratio Rb defined by Meng et al (1995) for the detection of frame breaks on B frames     *	@return	the ratio Rb     *	@exception	Exception if this is not a B frame     */    public float getRb() throws Exception{	float rb=0f;		if(frameType!=MPEG_video.B_TYPE) throw new Exception("Can't getRb() on non B-frame");	else {	    	if(numberOfForwardMacroblocks==0) {		    //Don't want rb to be infinity, approximate assuming numberOfForwardMacroblocks=1		    rb=numberOfBackwardMacroblocks;	    	}		else {		    rb=(float)numberOfBackwardMacroblocks/(float)numberOfForwardMacroblocks;	    	}	}		return(rb);    }        /**	Print a representation of this macro-block to System.out     */    public void show(){	System.out.print("frameType: " + getFrameType());	System.out.print("\t");	System.out.print("frameNumber: " + frameNumber + "\t");		//System.out.print("numberOfMacroblocks: " + numberOfMacroblocks + "\t");	//System.out.print("numberOfForwardMacroblocks: " + numberOfForwardMacroblocks + "\t");	//System.out.print("numberOfBackwardMacroblocks: " + numberOfBackwardMacroblocks + "\n");	System.out.print("TotalDisplacement: " + getTotalDisplacement() + "\n");    }}