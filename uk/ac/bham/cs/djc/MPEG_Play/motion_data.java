//22nd December 1999 - DJCpackage uk.ac.bham.cs.djc.MPEG_Play;import de.tuchemnitz.informatik.MPEG_Play.*;import java.awt.Point;/**	The motion data for a macro-block describing how it is mapped between frames * 	 * 	<a href="motion_data.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 22nd December 1999 */public class motion_data extends de.tuchemnitz.informatik.MPEG_Play.motion_data{    /**	Point describing x and y components of vector */    private Point motionVector;        /**	Timestamps to ensure currency of motion vector value */	    private int timestamp=0,timestampAtWhichMotionVectorSet=-1;        /**	Compute the new motion vector     *      *	@param	motion_horiz_x_code     *	@param	motion_verti_x_code     *	@param	motion_horiz_x_r     *	@param	motion_verti_x_r     */    public void compute_motion_vector(int motion_horiz_x_code, int motion_verti_x_code, int motion_horiz_x_r, int motion_verti_x_r) {	timestamp++;	    	super.compute_motion_vector(motion_horiz_x_code,motion_verti_x_code,motion_horiz_x_r,motion_verti_x_r);		//Update the motion vector:	motionVector=new Point(right_x,down_x);	timestampAtWhichMotionVectorSet=timestamp;    }        /**	Get the motion vector     * 	@return	motion vector     * 	@exception Exception if the motion vector does not correspond with this macroblock     */    public Point getMotionVector() throws Exception{	Point vectorToReturn=null;		if(timestampAtWhichMotionVectorSet==timestamp) {	    vectorToReturn=motionVector;	}	else throw(new Exception("Motion Vector does not correspond with this macroblock"));		return(vectorToReturn);    }}