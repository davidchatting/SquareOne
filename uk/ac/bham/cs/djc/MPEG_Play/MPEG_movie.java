//9th December 1999 - DJCpackage uk.ac.bham.cs.djc.MPEG_Play;import de.tuchemnitz.informatik.MPEG_Play.*;import java.io.*;import uk.ac.bham.cs.djc.time.Period;import uk.ac.bham.cs.djc.time.TimeLine;/**	Selectively parse an MPEG-1 Movie<br> * 	Assumes that this movie has a single video track * 	 * 	<a href="MPEG_movie.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 9th December 1999 */public class MPEG_movie extends MPEG_scan{    /**	The time in the football match where this movie starts */    protected int startTimeOfMovie=0;        /**	Create a new MPEG_movie object     * 	@param	stream the MPEG file stream     */    public MPEG_movie(InputStream stream) {	this(stream,0);    }        /**	Create a new MPEG_movie object     * 	@param	stream the MPEG file stream     * 	@param	newStartTimeOfMovie the time in the football match where this movie starts     */    public MPEG_movie(InputStream stream, int newStartTimeOfMovie) {	super(new MPEG_Play_null(), stream);		startTimeOfMovie=newStartTimeOfMovie;		//The super() assigns video_decoder, mpeg_stream and video_thread, we want to resign them:	setVideoDecoder(stream);    }        /**	Get the duration of the video in milliseconds     * 	@return	the duration of the video in milliseconds     * 	@excpetion Exception if can't get duration of this movie     */    public int getDurationOfVideo() throws Exception{    	int duration=0;    	duration=((uk.ac.bham.cs.djc.MPEG_Play.MPEG_video)video_decoder).getDuration();    	return(duration);    }        /**	Get the frame rate of the video     * 	@return	the frame rate of the video, in frames per second     */    public double getFrameRateOfVideo() {	double frameRate;    	frameRate=((uk.ac.bham.cs.djc.MPEG_Play.MPEG_video)video_decoder).getFrameRate();    	return(frameRate);    }        /**	Selectively parse the video at the times describied by this timeline     * 	@param	sequenceToParse the sequences to parse (deeply)     */    public void parseVideoSequence(TimeLine sequenceToParse) {	((uk.ac.bham.cs.djc.MPEG_Play.MPEG_video)video_decoder).parseSequence(sequenceToParse);    }        /**	Reset the input stream     *	@param	 stream the new input stream     */    public void reset(InputStream stream) {	super.reset(stream);		//The super() assigns video_decoder, mpeg_stream and video_thread, we want to resign them:	setVideoDecoder(stream);    }        /**	Set the video decoder and associated objects     * 	Reassigns objects set by super class     * 	@param	stream the new input stream     */    protected synchronized void setVideoDecoder(InputStream stream) {	//Clean up from before:	mpeg_stream=null;	video_decoder=null;	video_thread=null;	System.gc();		//Reassign objects to equivalents from this package:	mpeg_stream = new MPEG_stream(stream,video_semaphor);	video_decoder = new uk.ac.bham.cs.djc.MPEG_Play.MPEG_video(Player, mpeg_stream);	video_thread = new Thread(video_decoder);    }}