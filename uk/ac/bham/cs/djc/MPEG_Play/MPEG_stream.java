//1st Janaury 2000package uk.ac.bham.cs.djc.MPEG_Play;import de.tuchemnitz.informatik.MPEG_Play.*;import java.io.*;/**	The MPEG movie stream * 	 * 	<a href="MPEG_stream.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 1st Janaury 2000 */public class MPEG_stream extends de.tuchemnitz.informatik.MPEG_Play.io_tool{    /**	Create an instance of the  MPEG_stream class      *	@param	stream the MPEG file input stream     *	@param	sem semaphor     */    public MPEG_stream(InputStream stream, semaphor sem) {	super(stream,sem);    }        /**	Skip n bytes in the stream<BR>     * 	Currently UNIMPLEMENTED     * 	@param	n the number of bytes to skip     */    public void skip(long n) {	int k = bit_pos / 8; // How many bytes are already in shift register ?	n -= k;		     // substract from whole count	bit_pos -= k * 8;    // skip over the bits in shift register	next_bits_available = 0; // destroy correlation between "get_bits" and "net_bits"	try {	    	dis.skipBytes((int)n);	}	catch (Exception e) {		Err.Msg = "skip: " + e.toString();	}    }        /**	Mark this position in the stream     * 	@param readlimit the limit for which the mark is available, in bytes     */    public synchronized void mark(int readlimit) {	dis.mark(readlimit);    }        /**	Mark this position in the stream     */    public synchronized void mark() {	dis.mark(Integer.MAX_VALUE);    }        /**	Reset the stream<BR>     * 	Currently UNIMPLEMENTED     * 	@exception IOException if can't reset the stream     */    public synchronized void reset() throws IOException {	try {	    dis.reset();	    	    bit_pos=0;			//Reset bit- "pointer"	    longword=0;			//Reset bit shift register	    save_word=0;	    save_pos=0;	    next_bits_available=0;	//How many bits of "next_bits" are valid 	}	catch(IOException ioe) {	    throw(ioe);	}    }}