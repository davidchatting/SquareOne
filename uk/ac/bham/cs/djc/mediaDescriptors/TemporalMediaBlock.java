/* Generated by Together *///20th November 1999 - DJCpackage uk.ac.bham.cs.djc.mediaDescriptors;import java.io.Serializable;import uk.ac.bham.cs.djc.time.Period;import java.io.ObjectOutputStream;import java.io.ObjectInputStream;import java.io.IOException;/**	A sequence of media which continues over some defined period of time * 	 * 	<a href="TemporalMediaBlock.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 20th November 1999 */public class TemporalMediaBlock extends MediaBlock implements Serializable{    /**	The period of this media block */    protected Period periodOfMedia;        /**	The sample rate of the media in samples/second */    protected double sampleRate;        /**	A textual description of this media block */    protected String description=null;        /**	Create a new TemporalMediaBlock     *	@param	newPeriod the period of this media block     *	@param	newSampleRate the sample rate of this media in samples/second     *	@param	newDescription a textual description of this media block     */    public TemporalMediaBlock(Period newPeriod, double newSampleRate, String newDescription) {	this(newPeriod,newSampleRate);	setDescription(newDescription);    }        /**	Create a new TemporalMediaBlock     *	@param	newPeriod the period of this media block     *	@param	newSampleRate the sample rate of this media in samples/second     */    public TemporalMediaBlock(Period newPeriod, double newSampleRate) {	periodOfMedia=newPeriod;	sampleRate=newSampleRate;    }        /**	Copy Constructor - create a new TemporalMediaBlock from an existing one     * 	@param	secondTemporalMediaBlock the TemporalMediaBlock to copy     */    public TemporalMediaBlock(TemporalMediaBlock secondTemporalMediaBlock) {	super(secondTemporalMediaBlock);	periodOfMedia=new Period(secondTemporalMediaBlock.getPeriodOfMedia());	sampleRate=secondTemporalMediaBlock.getSampleRate();	description=secondTemporalMediaBlock.getDescription();    }        /**	Get the period of this media block     * 	@return	the period of this media block     */    public Period getPeriodOfMedia() {	return(periodOfMedia);    }        /**	Return the sample rate in samples/second     * 	@return	the sample rate in samples/second     */    public double getSampleRate() {	return(sampleRate);    }        /**	Get the number of milliseconds which are described by both this TemporalMediaBlock and a second     * 	@param	secondTemporalMediaBlock the second TemporalMediaBlock     * 	@return	the number of shared milliseconds     */    public int getNumberOfSharedMilliseconds(TemporalMediaBlock secondTemporalMediaBlock) {    	int numberOfSharedMilliseconds=0;	Period otherPeriodOfMedia=secondTemporalMediaBlock.getPeriodOfMedia();		numberOfSharedMilliseconds=periodOfMedia.getNumberOfSharedMilliseconds(otherPeriodOfMedia);	return(numberOfSharedMilliseconds);    }        /**	Get the textual description of this media block     * 	@return	textual description of this media block     */    public String getDescription() {    	return(description);    }        /**	Set the textual description of this media block     * 	@param	the new textual description of this media block     */    public void setDescription(String newDescription) {    	description=newDescription;    }        /**	Get a String representation of this TemporalMediaBlock     *	@return	String representation of this TemporalMediaBlock     */    public String toString() {	return(periodOfMedia.toString());    }        /**	Write this TemporalMediaBlock to the specified ObjectOutputStream     * 	@param	out the ObjectOutputStream to write to     */    private void writeObject(ObjectOutputStream out) throws IOException {	out.defaultWriteObject();    }        /**	Read a TemporalMediaBlock from the specified ObjectInputStream     * 	@param	in the ObjectInputStream to read from     */    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {	in.defaultReadObject();    }}