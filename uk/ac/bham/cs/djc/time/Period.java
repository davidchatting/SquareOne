//30th November 1999 - DJCpackage uk.ac.bham.cs.djc.time;import java.io.Serializable;import java.io.ObjectOutputStream;import java.io.ObjectInputStream;import java.io.IOException;/**	Representation of a period between start and finish inclusivey - in milliseconds<p> * 	 * 	<a href="Period.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 30th November 1999 */public class Period extends java.awt.Point implements Serializable{    /**	Create a new Period     * 	If start is greater than finish, the finish time is set to the start time     * 	If start or finish is less than zero it is set to zero     * 	@param	start the start time in milliseconds     * 	@param	stop the stop time in milliseconds     */    public Period(int start, int finish) {	super(start,finish);		setPeriod(start,finish);    }        /**	Create a new Period by making a copy of a second     * 	@param	secondPeriod the second Period object to copy     */    public Period(Period secondPeriod) {	//No need to check validity, as checked when secondPeriod constructed	super(secondPeriod);    }        /**	Create a new Period not setting either the start or stop times     */    public Period() {	super();    }        /**	Get the start time in milliseconds     *	@return	the start time in milliseconds     */    public int getStart() {	return(x);    }        /**	Get the finish time in milliseconds     *	@return	the finish time in milliseconds     */    public int getFinish() {	return(y);    }        /**	Set the start time in milliseconds     *	@param	the new start time in milliseconds     */    public void setStart(int newStart) {	if(newStart<0) x=0;	else x=newStart;    }        /**	Set the finish time in milliseconds     *	@param	the new finish time in milliseconds     */    public void setFinish(int newFinish) {	if(newFinish<0) y=0;	else y=newFinish;    }        /**	Set the start and stop times of this period     * 	If start is greater than finish, the finish time is set to the start time     * 	If start or finish is less than zero it is set to zero     * 	@param	newsStart the new start time in milliseconds     * 	@param	newStop the new stop time in milliseconds     */    public void setPeriod(int newStart,int newFinish) {	setStart(newStart);	setFinish(newFinish);		//Start can't be after finish:	if(newFinish<newStart) setFinish(newStart);    }        /**	Get the duration of this period     * 	@return	the duration in milliseconds     */    public int getDuration() {	return(y-x);    }        /**	Get a period which represents the common period between this a second period     * 	@param	secondPeriod the second period with which to find common period     * 	@return	the common period between this the second period     */    public Period getCommonPeriod(Period secondPeriod) {	int newStart=0;	int newFinish=0;		newStart=Math.max(getStart(),secondPeriod.getStart());	newFinish=Math.min(getFinish(),secondPeriod.getFinish());		if((newFinish-newStart)<0) {	    newStart=0;	    newFinish=0;	}		return(new Period(newStart,newFinish));    }        /**	Get the number of shared miliiseconds between this and a second period     * 	@param	secondPeriod the second period with which to find common period     * 	@return	the number of shared miliiseconds between this and the second period     */    public int getNumberOfSharedMilliseconds(Period secondPeriod) {	Period commonPeriod=getCommonPeriod(secondPeriod);		return(commonPeriod.getDuration());    }        /**	Get a String representation of this Period     * 	@return a String representation of this Period     */    public String toString() {	return(new String("Period:	start: " + x + " finish: " + y));    }}