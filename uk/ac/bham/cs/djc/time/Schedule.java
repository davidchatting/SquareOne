//3rd January 2000//7th January 2000: Name change from TimeLine to TimeLines//Name change from TimeLines to Schedulepackage uk.ac.bham.cs.djc.time;import java.util.Vector;import java.io.Serializable;import uk.ac.bham.cs.djc.mediaDescriptors.TemporalMediaBlock;import uk.ac.bham.cs.djc.mediaDescriptors.MediaBlock;import uk.ac.bham.cs.djc.*;/**	Schedule of media events representing the course of the football match<p> * 	 * 	<a href="Schedule.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 3rd January 2000 */public class Schedule implements Serializable{    /**	The TimeLines included in this schedule */    Vector timeLines=new Vector();        /**	Create a new Schedule */    public Schedule(){    }        /**	For a given media file extract all the temporal media blocks and add them to the schedule     * 	@param	newMediaFile the media file from to extract all the temporal media blocks to be added to the Schedule     * 	@exception	Exception if unable to add this file     */    public void add(MediaFile newMediaFile) throws Exception{	Vector mediaBlocks=newMediaFile.getAllMediaBlocks();	MediaBlock currentMediaBlock=null;		for(int index=0;index<mediaBlocks.size();index++) {		currentMediaBlock=(MediaBlock)mediaBlocks.elementAt(index);				if(currentMediaBlock instanceof TemporalMediaBlock) {		    add((TemporalMediaBlock)currentMediaBlock);		}	}    }        /**	Add a temporal media block to the schedule     * 	@param	newTemporalMediaBlock TemporalMediaBlock to add     * 	@exception	Exception if this block can't be added     */    public void add(TemporalMediaBlock newTemporalMediaBlock) throws Exception{	TimeLine thisTimeline=null;		//Get the timeline for this class of objects, if it exists:	thisTimeline=getMediaBlockClassTimeLine((newTemporalMediaBlock.getClass()).getName());		//Each media type has a timeline in the schedule - make one if there isn't one already and add the new block:	if(thisTimeline==null) {	    timeLines.addElement(new TimeLine(newTemporalMediaBlock));	}	else {	    //Otherwise, add to an existing timeline:	    thisTimeline.add(newTemporalMediaBlock);	}    }        /**	Get an existing timeline for this media block class     * 	@param 	mediaBlockClass fully qualified classname for which to find a timeline     * 	@return	the found TimeLine, null if it doesn't exist     */    public TimeLine getMediaBlockClassTimeLine(String mediaBlockClass) {	TimeLine timelineToReturn=null;	TimeLine currentTimeLine=null;		//for(each timeline):	for(int index=0;index<timeLines.size() && (timelineToReturn==null);index++) {	    currentTimeLine=(TimeLine)timeLines.elementAt(index);	    	    //if(the class names match):	    if((currentTimeLine.getMediaBlockClass()).equals(mediaBlockClass)) {		//Set this as the result:		timelineToReturn=currentTimeLine;	    }	}		return(timelineToReturn);    }        /**	Return timeline which represents all common times between the two timelines      *	@param	timeline1 first timeline     *	@param	timeline2 second timeline     *	@return	a timeline of all common times between the two timelines for these media block classes      *	@exception	Exception if one or both of media block classes do not have a timeline     */    public TimeLine getIntersection(TimeLine timeline1, TimeLine timeline2) throws Exception {	TimeLine timeLineToReturn=null;		//Check they were both found:	if(timeline1==null || timeline2==null) {	    throw new Exception("One or both of media block classes do not have a timeline");	}	else {	    //Find the intersection:	    timeLineToReturn=timeline1.intersection(timeline2);	}		return(timeLineToReturn);    }        /**	Return timeline which represents all common times between the two timelines for these media block classes      *	@param	MediaBlockClass1 fully qualified classname for which a timeline has been constructed     *	@param	MediaBlockClass2 fully qualified classname for which a timeline has been constructed     *	@return	a timeline of all common times between the two timelines for these media block classes      *	@exception	Exception if one or both of media block classes do not have a timeline     */    public TimeLine getIntersection(String mediaBlockClass1, String mediaBlockClass2) throws Exception {	TimeLine timeLineToReturn=null;		//Get the timelines:	TimeLine timeline1=getMediaBlockClassTimeLine(mediaBlockClass1);	TimeLine timeline2=getMediaBlockClassTimeLine(mediaBlockClass2);		//Get the intersection:	timeLineToReturn=getIntersection(timeline1,timeline2);		return(timeLineToReturn);    }        /**	Return a string representation of this Schedule      *	@return	the string representation of this Schedule      */    public String toString() {	String stringToReturn=new String();		TimeLine currentTimeLine=null;	for(int index=0;index<timeLines.size();index++) {	    currentTimeLine=(TimeLine)timeLines.elementAt(index);	    stringToReturn+=currentTimeLine.toString();	}		return(stringToReturn);    }}