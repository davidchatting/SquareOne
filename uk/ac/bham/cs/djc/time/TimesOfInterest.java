//11th February 2000 - DJCpackage uk.ac.bham.cs.djc.time;import java.io.Serializable;import java.io.ObjectOutputStream;import java.io.ObjectInputStream;import java.io.FileOutputStream;import java.io.FileInputStream;import java.io.IOException;import uk.ac.bham.cs.djc.mediaDescriptors.TemporalMediaBlock;import uk.ac.bham.cs.djc.Gaussian;/**	A timeline which records the viewer's interest<p> * 	 * 	<a href="TimesOfInterest.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 11th February 2000 */public class TimesOfInterest extends TimeLine implements Serializable{    /**	Constructor     *	@param	newTemporalMediaBlock is the first item on the timeline     *	@exception	Exception     */    public TimesOfInterest(TemporalMediaBlock newTemporalMediaBlock) throws Exception{	super(new Interest(newTemporalMediaBlock));    }        /**	Constructor     *	@param	newTemporalMediaBlock is the first item on the timeline     *	@exception	Exception     */    public TimesOfInterest(Interest newTemporalMediaBlock) throws Exception{	super(newTemporalMediaBlock);    }        /**	Copy Constructor     * 	@param	newTimeLine     */    public TimesOfInterest(TimeLine newTimeLine) {	super(newTimeLine);    }        /**	Add a new TemporalMediaBlock to the timeline     * 	@param	newTemporalMediaBlock     * 	@exception	Exception     */    public void add(TemporalMediaBlock newTemporalMediaBlock) throws Exception{	Interest temporalInterest=null;	if(!(newTemporalMediaBlock instanceof Interest)) {		temporalInterest=new Interest(newTemporalMediaBlock);	}	else temporalInterest=(Interest)newTemporalMediaBlock;		super.add(temporalInterest);    }        /**	Cut all items on the timeline which include timeToCutAt     * 	@param	timeToCutAt     */    public void cut(int timeToCutAt) {	//extend to cope with interest arrays beging split	super.cut(timeToCutAt);    }        /**	Get the nth Interest object     * 	@param	n     * 	@return	the Interest object     */    public Interest getInterestN(int n) {	Interest thisInterest=(Interest)((Moment)(startTimes.elementAt(n))).getTemporalMediaBlock();	    	return(thisInterest);    }        /**	Set the score of the named feature     * 	@param	featureName     * 	@param	scoringGaussian     * 	@exception	Exception     */    public void setScore(String featureName,int time,Gaussian scoringGaussian) throws Exception{	//Find instance of Interest and set it's interest	TemporalMediaBlock currentInterest=null;	for(int index=0;index<startTimes.size();index++) {		currentInterest=((Moment)(startTimes.elementAt(index))).getTemporalMediaBlock();		if(currentInterest instanceof Interest) {		    try {		    	//Try and set the interest:		    	((Interest)currentInterest).setScore(featureName,time,scoringGaussian);		    }		    catch(Exception e) {			//Failed to set interest - as currentInterest does not describe this time		    }		}	}    }        /**	Set the score of the named feature     * 	@param	featureName     * 	@param	score     * 	@exception	Exception     */    public void setScore(String featureName,int time,float score) throws Exception{	//Find instance of Interest and set it's interest	TemporalMediaBlock currentInterest=null;	for(int index=0;index<startTimes.size();index++) {		currentInterest=((Moment)(startTimes.elementAt(index))).getTemporalMediaBlock();		if(currentInterest instanceof Interest) {		    try {		    	//Try and set the interest:		    	((Interest)currentInterest).setScore(featureName,time,score);		    }		    catch(Exception e) {			//Failed to set interest - as currentInterest does not describe this time		    }		}	}    }        /**	Using the interest information prune the timeline to include only the most interesting events     */    public void findMostInterestingSequences() {	Interest currentInterest=null;	for(int index=0;index<startTimes.size();index++) {	    currentInterest=(Interest)(((Moment)(startTimes.elementAt(index))).getTemporalMediaBlock());	    currentInterest.findMostInterestingSequence();	}    }        //Want method to set many interest values simultaneously        /**	Return a string respresentation of this object     */    public String toString() {	String stringToReturn=new String();		Interest currentInterest=null;	for(int index=0;index<startTimes.size();index++) {	    currentInterest=(Interest)(((Moment)(startTimes.elementAt(index))).getTemporalMediaBlock());	    stringToReturn+=currentInterest.toString();	    stringToReturn+=System.getProperty("line.separator");	    stringToReturn+=System.getProperty("line.separator");	}		return(stringToReturn);    }        /**     *	@param	filename     *	@exception	IOException     */    public void writeToFile(String filename) throws IOException{	FileOutputStream out = new FileOutputStream(filename);	ObjectOutputStream s = new ObjectOutputStream(out);		try {		s.writeObject(this);	    	s.flush();	}	catch(Exception e) {	}    }        /**	     *	@param	filename     *	@return	new TimesOfInterest object     *	@exception	IOException     *	@exception	ClassNotFoundException     */    public static TimesOfInterest readFromFile(String filename) throws IOException, ClassNotFoundException{	FileInputStream in=new FileInputStream(filename);	ObjectInputStream s = new ObjectInputStream(in);		return((TimesOfInterest)s.readObject());    }        /**	     * 	@param	out     * 	@exception	IOException     */    private void writeObject(ObjectOutputStream out) throws IOException {	out.defaultWriteObject();    }        /**	     * 	@param	in     * 	@exception	IOException     *	@exception	ClassNotFoundException     */    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {	in.defaultReadObject();    }}