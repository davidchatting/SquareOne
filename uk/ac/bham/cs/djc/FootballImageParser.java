//20th February 2000 - DJCpackage uk.ac.bham.cs.djc;import java.awt.Image;import uk.ac.bham.cs.djc.mediaDescriptors.SampledImage;/**	Parses an image of frame from a football movie<p> * 	 * 	<a href="FootballImageParser.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 20th February 2000 */public class FootballImageParser extends SampledImage {    /**	If this image contains a pitch, null if unset*/    protected Boolean pitch=null;        /**	If this image contains goal posts, null if unset*/    protected Boolean goalPosts=null;        /**	The column of the image containing the first candidate goal post */    protected int firstPostColumn=0;        /**	The column of the image containing the second candidate goal post */    protected int secondPostColumn=0;       /**	Create a new FootballImageParser    *	@param	newWidth the width of the image    *	@param	newHeight the height of the image    *	@param	newVerticalSampleRate the vertical sample rate at which the image will be sampled vertically    *	@param	newHorizontalSampleRate the horizontal sample rate at which the image will be sampled horizontally    */    public FootballImageParser(int newWidth,int newHeight,int newVerticalSampleRate,int newHorizontalSampleRate) {	super(newWidth,newHeight,newVerticalSampleRate,newHorizontalSampleRate);    }        /**	Create a new FootballImageParser from a supplied image    *	@param	newWidth the width of the image    *	@param	newHeight the height of the image    *	@param	newVerticalSampleRate the vertical sample rate at which the image will be sampled vertically    *	@param	newHorizontalSampleRate the horizontal sample rate at which the image will be sampled horizontally    *	@param	imageToSample the image to sample    */    public FootballImageParser(int newWidth,int newHeight,int newVerticalSampleRate,int newHorizontalSampleRate, Image imageToSample) throws Exception{    	super(newWidth,newHeight,newVerticalSampleRate,newHorizontalSampleRate,imageToSample);    }        /**	Does this pixel data in the image shows a football pitch?     * 	@return	if the sampled image contains a pitch     */    public boolean isPitch() {	if(pitch!=null) return(pitch.booleanValue());		boolean result=false;		//Rate at which the horizontals are sampled:	int horizontalSampleRate=getHorizontalSampleRate();	//Rate at which the verticals are sampled:	int verticalSampleRate=getVerticalSampleRate();		//Get dimensions:	int width=getWidth();	int height=getHeight();		//Grass and non-grass counters:	int grass=0;	int nonGrass=0;		RGB_pixel currentPixel=null;		for(int x=0;x<width;x+=verticalSampleRate) {	    for(int y=0;y<height;y+=horizontalSampleRate) {		//for(each pixel in the image)		try {			currentPixel=getPixel(x,y);			//if it is sampled - determine if grass/non-grass and keep score:			if(isGrass(currentPixel)) grass++;			else nonGrass++;		}		catch(Exception e) {		    //pixel not sampled or pixel is null		}	    }	}		//if(enough of the image is grass coloured):	if((((float)grass)/((float)(grass+nonGrass)))>Properties.percentOfGrassForPitch) {	    //Decide this is a pitch:	    result=true;	}		pitch=new Boolean(result);		return(result);    }        /**	Is this pixel grass coloured?     * 	@param	pixel the pixel to test     * 	@return	if this pixel is grass coloured     * 	@throws Exception if pixel is null     */    public boolean isGrass(RGB_pixel pixel) throws Exception{	if(pixel==null) throw new Exception("Pixel is null");		boolean result=false;		//Get RGB components of pixel:	float r=(float)(pixel.getRed());	float g=(float)(pixel.getGreen());	float b=(float)(pixel.getBlue());		//If this pixel is grass coloured:	if((g>Properties.minGreen) && (r<(Properties.maxRedToGreenRatio*g)) && (b<(Properties.maxBlueToGreenRatio*g))) {	    //Decide this could be grass:	    result=true;	}		return(result);    }        /**	Does the pixel data in the sampled image show goal posts?     *	@return	if the sampled imagecontains goal posts     */    public boolean areGoalPosts() {	boolean result=false;		//Create an array for the scores from each column of the image:	int scores[]=new int[getWidth()/getVerticalSampleRate()];		try {		result=areGoalPosts(scores);	}	catch(Exception e) {	    //This should never be thrown as size of scores has been set above correctly	}		return(result);    }        /**	Does this pixel data show goal posts?     * 	@param	scores an intantiated interger array into which the scores for each coloumn of the image can be stored     * 	@throws	Exception if scores[] is not the correct size     */    public boolean areGoalPosts(int scores[]) throws Exception {	if(goalPosts!=null) return(goalPosts.booleanValue());		if(scores.length!=(getWidth()/getVerticalSampleRate())) {	    throw new Exception("scores[] is not the correct size");	}		boolean result=false;		if(isPitch()) {		//Rate at which the horizontals are sampled:		int horizontalSampleRate=getHorizontalSampleRate();		//Rate at which the verticals are sampled:		int verticalSampleRate=getVerticalSampleRate();				int width=getWidth();		int height=getHeight();				//Create an array for the scores from each column of the image:		//int scores[]=new int[width/verticalSampleRate];				//Edge vertical detection kernel:		//int kernel[]= {-1,2,0};		int kernel[]= {-1,0,3,0,-1};				int maxScoreIndex=0;		int secondMaxScoreIndex=0;		int averageScore=0;		int columns=0;				//For each vertical line in the image:		int margin=Properties.noiseMargin;		for(int x=margin;x<width-margin;x+=verticalSampleRate) {	    		//For each pixel in the line:	    		for(int y=0;y<height;y+=horizontalSampleRate) {				try {					int score=0;					//for(int n=y-horizontalSampleRate;n<=y+horizontalSampleRate;n+=horizontalSampleRate) {					    	/*	    					score+=	(((getPixel(x-verticalSampleRate,n)).getIntensity()*kernel[0]) +							((getPixel(x,n)).getIntensity()*kernel[1]) +							((getPixel(x+verticalSampleRate,n)).getIntensity()*kernel[2]))/3;						*/					//}					score=(		((getPixel(x-(2*verticalSampleRate),y)).getIntensity()*kernel[0]) +					       		((getPixel(x-(1*verticalSampleRate),y)).getIntensity()*kernel[1]) +					       		((getPixel(x-(0*verticalSampleRate),y)).getIntensity()*kernel[2]) +					       		((getPixel(x+(1*verticalSampleRate),y)).getIntensity()*kernel[3]) +					       		((getPixel(x+(2*verticalSampleRate),y)).getIntensity()*kernel[4])					)/5;										scores[x/verticalSampleRate]+=score;				}				catch(Exception e) {		    			//pixel not sampled or pixel is null				}	    		}	    		//Set the average score for the number of pixels:	    		scores[x/verticalSampleRate]/=(height/horizontalSampleRate);	    	    		//Find the index of the scores array with the max score:	    		if(scores[x/verticalSampleRate]>scores[maxScoreIndex]) {	    			maxScoreIndex=x/verticalSampleRate;	    		}	    			    		averageScore+=scores[x/verticalSampleRate];	    		columns++;		}				//Calculate average score:		averageScore/=columns;				boolean foundSecondPost=false;		int indexOfSecondPost=-1;		//if(the max scoring column is a candidate goal post)		//if(scores[maxScoreIndex]>(Properties.minRatioForGoalPost*pixelData.getAverageIntensity())) {		//if(scores[maxScoreIndex]>(Properties.minRatioForGoalPost*averageScore)) {		if(scores[maxScoreIndex]>(Properties.minScoreForGoalPost+averageScore)) {		    	//Found first post		    	    		//Ensures posts at least Properties.minDistanceBetweenGoalPost apart:	    		int offset=(int)(Properties.minRatioPostWidthToImageWidth*(float)width);	    		int index=0;	    		    		int exceptionCount=0;	    		float percentDifference=0f;	    			    		//Try to find second post:	    		do{				exceptionCount=0;							//Look on RHS of first post:				try {		    			percentDifference=((float)scores[maxScoreIndex+offset+index])/((float)scores[maxScoreIndex]);										//if(candidate second post has similar score => similar length)					if(percentDifference>Properties.percentDifferenceAllowedInGoalPostHeight) {			    			if(indexOfSecondPost==-1) indexOfSecondPost=maxScoreIndex+offset+index;						else {						    if(scores[maxScoreIndex+offset+index]>scores[indexOfSecondPost]) {							indexOfSecondPost=maxScoreIndex+offset+index;						    }						}					    			    			//Decide that second post is found:			    			//foundSecondPost=true;			    			//System.out.println("First: " + maxScoreIndex + " Second: " + (new Integer(maxScoreIndex+offset+index)).toString());					}				}				catch(ArrayIndexOutOfBoundsException aiofbe1) {		    			//No more columns on RHS of posts:		    			exceptionCount++;				}							//Look on LHS of first post:				if(!foundSecondPost) {					try {			    			percentDifference=((float)scores[maxScoreIndex-offset-index])/((float)scores[maxScoreIndex]);									    			/*						percentDifference=1f-((float)Math.abs(scores[maxScoreIndex-offset									-index]-scores[maxScoreIndex]))									/((float)scores[maxScoreIndex]);						*/											//if(candidate second post has similar score => similar length)						if(percentDifference>Properties.percentDifferenceAllowedInGoalPostHeight) {				    			if(indexOfSecondPost==-1) indexOfSecondPost=maxScoreIndex-offset-index;							else {						    		if(scores[maxScoreIndex-offset-index]>scores[indexOfSecondPost]) {									indexOfSecondPost=maxScoreIndex-offset-index;						    		}							}				    							    			//Decide that second post is found:				    			//foundSecondPost=true;				    			//System.out.println("First: " + maxScoreIndex + " Second: " + (new Integer(maxScoreIndex-offset-index)).toString());						}					}					catch(ArrayIndexOutOfBoundsException aiofbe2) {						//No more columns on LHS of posts:		    				exceptionCount++;					}				}							index++;	    		//while(there columns left to look at AND the second post is not found):	    		} while(exceptionCount<2 && !foundSecondPost && ((maxScoreIndex-offset-index)>margin || maxScoreIndex+offset+index<(width-margin)));		}			//if(two posts found) decide goal post found:		if(indexOfSecondPost!=-1) {		    result=true;		    //System.out.println("First: " + maxScoreIndex + " Second: " + indexOfSecondPost);		    firstPostColumn=maxScoreIndex;		    secondPostColumn=indexOfSecondPost;		}	}	goalPosts=new Boolean(result);		return(result);    }        /**	Get the column of the image in the first post candiate is found     * 	@return the column of the image in the first post candiate is found     * 	@throw	Exception if no goal posts found     */    public int getFirstPostColumn() throws Exception{	int result;		if(areGoalPosts()) {	    result=firstPostColumn;	}	else throw new Exception("No goal posts found");		return(result);    }    /**	Get the column of the image in the second post candiate is found     * 	@return the column of the image in the second post candiate is found     * 	@throw	Exception if no goal posts found     */    public int getSecondPostColumn() throws Exception{	int result;		if(areGoalPosts()) {	    result=secondPostColumn;	}	else throw new Exception("No goal posts found");		return(result);    }}