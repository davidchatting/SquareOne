//20th February 2000 - DJCpackage uk.ac.bham.cs.djc;/**	Gaussian distribution<p> * 	 * 	<a href="Gaussian.java">Source code</a> * 	@author David Chatting (djc@cs.bham.ac.uk) *	@version Created 20th February 2000 */public class Gaussian{    /**	Used in Gaussian equation and determines width */    protected float sigma=0f;        /**	Multiply the result by this ammount */    protected float multiplier=1f;        /**	The offset from zero */    protected float offset=0f;       /**	Constructor      *	newSigma - value of sigma     *	newMultiplier - value of the multipler     */    private Gaussian(float newSigma, float newMultiplier) {	sigma=newSigma;	multiplier=newMultiplier;    }        /**	Constructor     *	width - width of the gaussian in milliseconds at 50% of peak value     *	newMultiplier - value of the multipler     */    public Gaussian(int width, float newMultiplier) {	this(width,newMultiplier,0f);    }        /**	Constructor      *	width - width of the gaussian in milliseconds at 50% of peak value     *	newMultiplier - value of the multipler     *	newOffset - offset from zero     */    public Gaussian(int width, float newMultiplier,float newOffset) {	setWidth(width);	multiplier=newMultiplier;	offset+=newOffset;    }        /**	Set the width in milliseconds at 50% of peak value     * 	@param	width the width of the distribution at 50% of peak value (when peak value is 1)     */    public void setWidth(int width) {	//Calculate suitable sigma:	sigma=(float)Math.sqrt(((double)(-1*(width*width)))/(8d*Math.log(0.5d)));    }        /**	Get the value at the given time in mS      *	time - time in milliseconds at which to get value     *	Throws IndexOutOfBoundsException if the gaussian's value is inconsequental at this time     */    public float valueAt(int time) throws IndexOutOfBoundsException{	float value=0f;		value=((float)(Math.exp((double)(-((time*time)/(2f*(sigma*sigma)))))));		if(value<0.1) throw new IndexOutOfBoundsException();		value*=multiplier;	value+=offset;		return(value);    }        /**	Return the offset */    public float getOffset() {	return(offset);    }}